@using Data.DTOs
@using Data.Models
@inject IAccountService AccountService

@if (IsOpen && Account != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title">Withdraw from account @Account.AccountNumber</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Destination</label>
                            <select class="form-select" @bind="SelectedAccountId">
                                <option value="">Cash</option>
                                @foreach (var acc in OtherAccounts)
                                {
                                    <option value="@acc.AccountId">@acc.AccountNumber</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Amount</label>
                            <InputNumber @bind-Value="model.Amount" class="form-control" />
                            <ValidationMessage For="@(() => model.Amount)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Currency</label>
                            <select class="form-select" @bind="SelectedCurrency">
                                @foreach (var cur in Enum.GetValues<CurrencyType>())
                                {
                                    <option value="@cur">@cur</option>
                                }
                            </select>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger py-2">
                                @errorMessage
                            </div>
                        }

                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-primary me-2" disabled="@isLoading">
                                @(isLoading ? "Processing..." : "Withdraw")
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public AccountInfoDto? Account { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSuccess { get; set; }

    private AmountDto model = new();
    private bool isLoading;
    private string? errorMessage;

    private List<AccountInfoDto> OtherAccounts = new();
    private int? SelectedAccountId { get; set; }
    private CurrencyType SelectedCurrency { get; set; } = CurrencyType.GEL;

    protected override async Task OnParametersSetAsync()
    {
        if (!IsOpen || Account == null) return;

        var all = await AccountService.GetAccountsByClientIdAsync(Account.ClientId);
        OtherAccounts = all.Where(a => a.AccountId != Account.AccountId).ToList();
    }

    private async Task HandleValidSubmit()
    {
        if (Account == null) return;

        isLoading = true;
        errorMessage = null;

        try
        {
            if (SelectedAccountId == null)
            {
                await AccountService.WithdrawAccountAsync(Account.AccountId, model.Amount);
            }
            else
            {
                await AccountService.TransferAsync(
                    fromAccountId: Account.AccountId,
                    toAccountId: SelectedAccountId.Value,
                    amount: model.Amount);
            }

            await OnSuccess.InvokeAsync();
            await CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CloseModal()
    {
        errorMessage = null;
        model.Amount = 0;
        SelectedAccountId = null;
        SelectedCurrency = CurrencyType.GEL;
        await OnClose.InvokeAsync();
    }
}
