@using Data.DTOs
@inject IAccountService AccountService

@if (IsOpen && Account != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title">Withdraw from account @Account.AccountNumber</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Amount</label>
                            <InputNumber @bind-Value="model.Amount" class="form-control" />
                            <ValidationMessage For="@(() => model.Amount)" />
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-primary me-2" disabled="@isLoading">
                                @(isLoading ? "Processing..." : "Withdraw")
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public AccountInfoDto? Account { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSuccess { get; set; }

    private AmountDto model = new();
    private bool isLoading;

    private async Task HandleValidSubmit()
    {
        if (Account == null) return;

        isLoading = true;
        try
        {
            await AccountService.WithdrawAccountAsync(Account.AccountId, model.Amount);
            await OnSuccess.InvokeAsync();
            await CloseModal();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
}
