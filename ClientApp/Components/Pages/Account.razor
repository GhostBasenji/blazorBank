@page "/account"
@using Data.DTOs
@using Data.Models
@using ClientApp.Services
@inject ServiceCurrentClient CurrentClientService
@inject IAccountService AccountService
@inject NavigationManager Nav
@rendermode InteractiveServer

@using ClientModel = Data.Models.Client

<h3 class="mb-4 fw-bold">Accounts</h3>

@if (isLoading)
{
    <p>Loading account details...</p>
}
else if (accounts is null || accounts.Count == 0)
{
    <p>No account information found.</p>
}
else
{
    <div class="table-container mt-3">
        <table class="table custom-table text-center align-middle">
            <thead>
                <tr>
                    <th @onclick="() => SortBy(nameof(AccountInfoDto.AccountNumber))">Account No.</th>
                    <th @onclick="() => SortBy(nameof(AccountInfoDto.FullName))">Client name</th>
                    <th @onclick="() => SortBy(nameof(AccountInfoDto.Currency))">Currency</th>
                    <th @onclick="() => SortBy(nameof(AccountInfoDto.Status))">Status</th>
                    <th @onclick="() => SortBy(nameof(AccountInfoDto.Balance))">Balance</th>
                    <th @onclick="() => SortBy(nameof(AccountInfoDto.CreatedAt))">Created date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var acc in sortedAccounts)
                {
                    <tr>
                        <td>@acc.AccountNumber</td>
                        <td class="text-primary fw-medium">@acc.FullName</td>
                        <td class="text-primary">@acc.Currency</td>
                        <td>
                            <span class="badge bg-light text-dark border px-3 py-1 rounded-pill shadow-sm">@acc.Status</span>
                        </td>
                        <td>@acc.Balance?.ToString("C")</td>
                        <td>@acc.CreatedAt?.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    @code {
    private List<AccountInfoDto>? accounts;
    private List<AccountInfoDto>? sortedAccounts;
    private bool isLoading = true;

    private string? sortColumn;
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = await CurrentClientService.GetCurrentClientAsync();

            if (client == null)
            {
                Nav.NavigateTo("/login");
                return;
            }

            accounts = await AccountService.GetAccountsByClientIdAsync(client.ClientId);
            SortBy(nameof(AccountInfoDto.AccountNumber)); // начальная сортировка
        }
        catch
        {
            accounts = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SortBy(string columnName)
    {
        if (accounts is null)
            return;

        if (sortColumn == columnName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = columnName;
            sortAscending = true;
        }

        sortedAccounts = columnName switch
        {
            nameof(AccountInfoDto.AccountNumber) => sortAscending
                ? accounts.OrderBy(a => a.AccountNumber).ToList()
                : accounts.OrderByDescending(a => a.AccountNumber).ToList(),

            nameof(AccountInfoDto.FullName) => sortAscending
                ? accounts.OrderBy(a => a.FullName).ToList()
                : accounts.OrderByDescending(a => a.FullName).ToList(),

            nameof(AccountInfoDto.Currency) => sortAscending
                ? accounts.OrderBy(a => a.Currency).ToList()
                : accounts.OrderByDescending(a => a.Currency).ToList(),

            nameof(AccountInfoDto.Status) => sortAscending
                ? accounts.OrderBy(a => a.Status).ToList()
                : accounts.OrderByDescending(a => a.Status).ToList(),

            nameof(AccountInfoDto.Balance) => sortAscending
                ? accounts.OrderBy(a => a.Balance).ToList()
                : accounts.OrderByDescending(a => a.Balance).ToList(),

            nameof(AccountInfoDto.CreatedAt) => sortAscending
                ? accounts.OrderBy(a => a.CreatedAt).ToList()
                : accounts.OrderByDescending(a => a.CreatedAt).ToList(),

            _ => accounts
        };
    }
}
}