@page "/account"
@using Data.DTOs
@using Data.Models
@inject ClientApp.Services.ServiceCurrentClient CurrentClientService
@inject IAccountService AccountService
@inject NavigationManager Nav
@inject ITransactionService TransactionService
@rendermode InteractiveServer



<h3 class="mb-4 fw-bold">Accounts</h3>

@if (isLoading)
{
    <p>Loading account details...</p>
}
else if (accounts is null || accounts.Count == 0)
{
    <p>No account information found.</p>
}
else
{
    <div class="d-flex justify-content-end mb-3">
        <InputText @bind-Value="searchText" placeholder="Enter account number..." class="form-control w-25 me-2" />
        <button class="btn btn-primary" @onclick="OnSearch">Search</button>
        <button class="btn btn-secondary ms-2" @onclick="OnReset">Reset</button>
    </div>

    <div class="table-container mt-3">
        @if (sortedAccounts is null || sortedAccounts.Count == 0)
        {
            <p>No accounts found</p>
        }
        else
        {
            <table class="table custom-table text-center align-middle">
                <thead>
                    <tr>
                        <th @onclick="SortByAccountNumber" style="cursor:pointer;">
                            Account No.
                            @if (sortAscending)
                            {
                                <span>&uarr;</span>
                            }
                            else
                            {
                                <span>&darr;</span>
                            }
                        </th>
                        <th>Client name</th>
                        <th>Status</th>
                        <th>Balance</th>
                        <th>Created date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var acc in sortedAccounts)
                    {
                        <tr>
                            <td>@acc.AccountNumber</td>
                            <td class="text-primary fw-medium">@acc.FullName</td>
                            <td>
                                <span class="badge bg-light text-dark border px-3 py-1 rounded-pill shadow-sm">@acc.Status</span>
                            </td>
                            <td>@acc.Balance?.ToString("C")</td>
                            <td>@acc.CreatedAt?.ToString("yyyy-MM-dd")</td>
                            <td>
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => ShowTopUpModal(acc)">
                                    Top Up
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ShowWithdrawModal(acc)">
                                    Withdraw
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

<!-- Таблица последних транзакций -->
<div class="mt-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="fw-bold">Recent Transactions</h4>
        <a href="/transactions" class="btn btn-outline-primary btn-sm">View All</a>
    </div>

    @if (isLoadingTransactions)
    {
        <p>Loading transactions...</p>
    }
    else if (recentTransactions is null || recentTransactions.Count == 0)
    {
        <p>No recent transactions found.</p>
    }
    else
    {
        <table class="table custom-table text-center align-middle">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Account</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in recentTransactions)
                {
                    <tr>
                        <td>@transaction.TransactionDate?.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@transaction.AccountNumber</td>
                        <td>
                            <span class="badge
                                        @(transaction.TransactionType == "TopUp" || transaction.TransactionType == "Transfer In" ? "bg-success" : "bg-danger")">
                                @transaction.TransactionType
                            </span>
                        </td>
                        <td class="@(transaction.TransactionType == "TopUp" || transaction.TransactionType == "Transfer In" ? "text-success" : "text-danger")">
                            @(transaction.TransactionType == "TopUp" || transaction.TransactionType == "Transfer In" ? "+" : "-")@transaction.Amount.ToString("C")
                        </td>
                        <td>@transaction.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<TopUpModal Account="SelectedAccount"
            IsOpen="IsTopUpModalOpen"
            OnSuccess="HandleTopUpSuccess"
            OnClose="HandleCloseModal" />

<WithdrawModal Account="SelectedAccount"
               IsOpen="IsWithdrawModalOpen"
               OnSuccess="HandleWithdrawSuccess"
               OnClose="HandleCloseWithdrawModal" />

@code {
    private List<AccountInfoDto>? accounts;
    private List<AccountInfoDto>? sortedAccounts;
    private bool isLoading = true;

    private List<TransactionDto>? recentTransactions;
    private bool isLoadingTransactions = false;

    private bool sortAscending = true;
    private string searchText = string.Empty;

    private const int LocalFilterThreshold = 500;

    private AccountInfoDto? SelectedAccount { get; set; }
    private bool IsTopUpModalOpen { get; set; }
    private bool IsWithdrawModalOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
        await LoadRecentTransactionsAsync();
    }

    private async Task LoadAccountsAsync()
    {
        try
        {
            isLoading = true;

            var client = await CurrentClientService.GetCurrentClientAsync();
            if (client == null)
            {
                Nav.NavigateTo("/", forceLoad: true);
                return;
            }

            accounts = await AccountService.GetAccountsByClientIdAsync(client.ClientId);
            ApplySortingAndFiltering();
        }
        catch
        {
            accounts = new List<AccountInfoDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearch()
    {
        var client = await CurrentClientService.GetCurrentClientAsync();
        if (client == null)
        {
            Nav.NavigateTo("/", forceLoad: true);
            return;
        }

        if (accounts != null && accounts.Count <= LocalFilterThreshold)
        {
            ApplySortingAndFiltering();
        }
        else
        {
            var results = await AccountService.SearchAccountsAsync(client.ClientId, searchText);
            sortedAccounts = sortAscending
                ? results.OrderBy(a => a.AccountNumber).ToList()
                : results.OrderByDescending(a => a.AccountNumber).ToList();
        }
    }

    private async Task OnReset()
    {
        searchText = string.Empty;
        await OnSearch();
    }

    private void SortByAccountNumber()
    {
        sortAscending = !sortAscending;

        if (accounts != null && accounts.Count <= LocalFilterThreshold)
        {
            ApplySortingAndFiltering();
        }
        else if (sortedAccounts != null)
        {
            sortedAccounts = sortAscending
                ? sortedAccounts.OrderBy(a => a.AccountNumber).ToList()
                : sortedAccounts.OrderByDescending(a => a.AccountNumber).ToList();
        }
    }

    private void ApplySortingAndFiltering()
    {
        if (accounts == null) return;

        var query = accounts.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            query = query.Where(a => a.AccountNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        sortedAccounts = sortAscending
            ? query.OrderBy(a => a.AccountNumber).ToList()
            : query.OrderByDescending(a => a.AccountNumber).ToList();
    }

    private async Task LoadRecentTransactionsAsync()
    {
        try
        {
            isLoadingTransactions = true;

            var client = await CurrentClientService.GetCurrentClientAsync();
            if (client == null) return;

            recentTransactions = await TransactionService.GetRecentTransactionsAsync(client.ClientId, 5);
        }
        catch
        {
            recentTransactions = new List<TransactionDto>();
        }
        finally
        {
            isLoadingTransactions = false;
        }
    }

    private void ShowTopUpModal(AccountInfoDto account)
    {
        SelectedAccount = account;
        IsTopUpModalOpen = true;
    }

    private async Task HandleTopUpSuccess()
    {
        IsTopUpModalOpen = false;
        SelectedAccount = null;
        await LoadAccountsAsync();
        await LoadRecentTransactionsAsync();
    }

    private void HandleCloseModal()
    {
        IsTopUpModalOpen = false;
        SelectedAccount = null;
    }

    private void ShowWithdrawModal(AccountInfoDto account)
    {
        SelectedAccount = account;
        IsWithdrawModalOpen = true;
    }

    private async Task HandleWithdrawSuccess()
    {
        IsWithdrawModalOpen = false;
        SelectedAccount = null;
        await LoadAccountsAsync();
        await LoadRecentTransactionsAsync();
    }

    private void HandleCloseWithdrawModal()
    {
        IsWithdrawModalOpen = false;
        SelectedAccount = null;
    }
}
