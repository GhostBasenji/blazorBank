@using Data.DTOs
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService

@if (Show && Account != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title">Top up account @Account.AccountNumber</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Amount</label>
                            <InputNumber class="form-control" @bind-Value="TopUpAmount" />
                            <ValidationMessage For="@(() => TopUpAmount)" />
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-primary me-2" disabled="@isLoading">
                                @(isLoading ? "Loading..." : "Submit")
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public AccountInfoDto? Account { get; set; }       // текущий счёт
    [Parameter] public bool Show { get; set; }                     // показывать модал?
    [Parameter] public EventCallback OnClose { get; set; }         // закрытие модала
    [Parameter] public EventCallback OnSuccess { get; set; }       // успешное пополнение

    [Required(ErrorMessage = "Amount is required")]
    [Range(0.01, 100_000, ErrorMessage = "Amount must be between 0.01 and 100,000")]
    public decimal TopUpAmount { get; set; }

    private bool isLoading { get; set; }

    private async Task HandleValidSubmit()
    {
        if (Account == null) return;

        try
        {
            isLoading = true;

            await AccountService.TopUpAccountAsync(Account.AccountId, TopUpAmount);

            await OnSuccess.InvokeAsync();

            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error topping up account: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
}
