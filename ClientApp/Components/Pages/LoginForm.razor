@using ClientApp.Services
@using Data.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IClientAuthService AuthService
@inject NavigationManager Nav
@inject ServiceCurrentClient CurrentClientService
@inject ProtectedLocalStorage LocalStorage
@rendermode InteractiveServer

<div class="card p-4" style="width: 400px;">
    <h4 class="mb-3 text-center">Sign In</h4>

    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Login or email" @bind="login" autocomplete="off" />
    </div>
    <div class="mb-3">
        <input type="password" class="form-control" placeholder="Password" @bind="password" autocomplete="off" />
    </div>
    <div class="form-check mb-3 d-flex align-items-center">
        <input class="form-check-input me-2" type="checkbox" @bind="rememberMe" id="rememberCheck" />
        <label class="form-check-label" for="rememberCheck">Remember Me</label>
    </div>
    <div class="d-flex justify-content-between">
        <button class="btn btn-primary" @onclick="HandleLogin">Sign In</button>
        <button class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="text-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    [Parameter] public EventCallback OnCancel { get; set; }

    private string login = string.Empty;
    private string password = string.Empty;
    private bool rememberMe = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var savedLogin = await LocalStorage.GetAsync<string>("savedLogin");
        var savedPassword = await LocalStorage.GetAsync<string>("savedPassword");

        if (savedLogin.Success && savedPassword.Success)
        {
            var client = await AuthService.AuthenticateAsync(savedLogin.Value!, savedPassword.Value!);
            if (client != null)
            {
                await CurrentClientService.SetClientAsync(client);
                Nav.NavigateTo("/account");
            }
        }
    }

    private async Task HandleLogin()
    {
        var client = await AuthService.AuthenticateAsync(login, password);

        if (client is not null)
        {
            await CurrentClientService.SetClientAsync(client);

            if (rememberMe)
            {
                await LocalStorage.SetAsync("savedLogin", login);
                await LocalStorage.SetAsync("savedPassword", password);
            }

            errorMessage = null;
            Nav.NavigateTo("/account");
        }
        else
        {
            errorMessage = "Invalid login or password.";
        }
    }
}
