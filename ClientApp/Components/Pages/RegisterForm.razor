@using Data.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<div class="card shadow-sm p-4" style="width: 400px;">
    <h3 class="mb-3 text-center">Create an Account</h3>

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Username</label>
            <InputText class="form-control" @bind-Value="registerModel.Username" />
            <ValidationMessage For="@(() => registerModel.Username)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Email</label>
            <InputText type="email" class="form-control" @bind-Value="registerModel.Email" />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Password</label>
            <InputText type="password" class="form-control" @bind-Value="registerModel.Password" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Confirm Password</label>
            <InputText type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
        </div>

        <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-outline-secondary" @onclick="OnCancel">Cancel</button>
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public EventCallback OnCancel { get; set; }

    private RegisterModel registerModel = new();

    private void HandleRegister()
    {
        // Тут логика отправки данных в API / сервис
        Console.WriteLine($"Register: {registerModel.Username}, {registerModel.Email}");
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3)]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
}
