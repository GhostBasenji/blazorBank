@page "/account"
@using Data.DTOs
@inject Data.Services.IClientAuthService AuthService
@inject Client.Services.CurrentClientService CurrentClient
@inject Data.Services.IAccountService AccountService
@inject NavigationManager Nav
@rendermode InteractiveServer

<h3 class="mb-4">Account Information</h3>

@if (isLoading)
{
    <p>Loading account details...</p>
}
else if (accountInfo == null)
{
    <p>No account information found.</p>
}
else
{
    <div class="card p-4" style="max-width: 500px;">
        <div class="mb-2"><strong>Account Number:</strong> @accountInfo.AccountNumber</div>
        <div class="mb-2"><strong>Full Name:</strong> @accountInfo.FullName</div>
        <div class="mb-2"><strong>Currency:</strong> @accountInfo.Currency</div>
        <div class="mb-2"><strong>Status:</strong> @accountInfo.Status</div>
        <div class="mb-2"><strong>Balance:</strong> @accountInfo.Balance?.ToString("C")</div>
        <div class="mb-2"><strong>Created At:</strong> @accountInfo.CreatedAt?.ToString("yyyy-MM-dd")</div>
    </div>
}

@code {
    private AccountInfoDto? accountInfo;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CurrentClient.LoadClientAsync();

            if (CurrentClient.LoggedInClient == null)
            {
                Nav.NavigateTo("/login");
                return;
            }

            accountInfo = await AccountService.GetAccountInfoByClientIdAsync(CurrentClient.LoggedInClient.ClientId);
        }
        catch (Exception ex)
        {
            accountInfo = null;
        }
        finally
        {
            isLoading = false;
        }

        // Console.WriteLine($"Current logged-in client ID: {CurrentClient.LoggedInClient?.ClientId}");
    }
}